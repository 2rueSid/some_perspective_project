// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 Int       @id @default(autoincrement())
  email              String    @unique
  slug               String    @unique @default("")
  password           String
  first_name         String
  last_name          String?
  avatar_id          Int?
  role               Role      @default(USER)
  is_active          Boolean   @default(false)
  is_disabled        Boolean   @default(false)
  send_emails        Boolean   @default(false)
  has_public_profile Boolean   @default(false)
  deleted_at         DateTime?
  created_at         DateTime  @default(now())
  updated_at         DateTime  @default(now())

  UserTokens        UserTokens[]
  File              File[]
  Photo             Photo[]
  Tags              Tags[]
  UserLikes         UserLikes[]
  PhotoComments     PhotoComments[]
  CommentReactions  CommentReactions[]
  FriendList        FriendList[]
  UserPublicProfile UserPublicProfile[]

  Message Message[]
  @@unique([email, slug])
  @@map("users")
}

model UserPublicProfile {
  id            Int       @id @default(autoincrement())
  user_id       Int       @unique
  facebook_link String?
  instagram_lik String?
  twitter_link  String?
  youtube_link  String?
  video_link    String?
  about_me      String
  public_email  String?
  years         String?
  deleted_at    DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now())

  User User @relation(fields: [user_id], references: [id])

  @@map("user_public_profile")
}

model UserTokens {
  id         Int        @id @default(autoincrement())
  token      String     @unique
  lifetime   DateTime
  type       TokenTypes
  user_id    Int
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())

  User User @relation(fields: [user_id], references: [id])

  @@map("user_tokens")
}

model Photo {
  id          Int       @id @default(autoincrement())
  title       String
  slug        String    @unique
  description String?
  user_id     Int
  deleted_at  DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())

  User          User            @relation(fields: [user_id], references: [id])
  Files         File[]
  CustomTags    Tags[]
  UserLikes     UserLikes[]
  PhotoComments PhotoComments[]

  @@map("photos")
}

model PhotoComments {
  id         Int       @id @default(autoincrement())
  comment    String
  photo_id   Int
  user_id    Int
  is_edited  Boolean?  @default(false)
  is_seen    Boolean?  @default(false)
  deleted_at DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())

  User  User  @relation(fields: [user_id], references: [id])
  Photo Photo @relation(fields: [photo_id], references: [id])


  CommentReplies   CommentReplies[]
  CommentReactions CommentReactions[]
  @@map("photo_comments")
}

model Message {
  id          Int       @id @default(autoincrement())
  message     String
  is_edited   Boolean?  @default(false)
  is_seen     Boolean?  @default(false)
  deleted_at  DateTime?
  user_id     Int
  receiver_id Int
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())

  User User @relation(fields: [user_id], references: [id])

  @@map("message")
}

model CommentReplies {
  id         Int      @id @default(autoincrement())
  comment_id Int
  reply_to   Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  Comment PhotoComments @relation(fields: [comment_id], references: [id])

  @@map("comments_replies")
}

model CommentReactions {
  id          Int      @id @default(autoincrement())
  comment_id  Int
  user_id     Int
  is_liked    Boolean
  is_disliked Boolean
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  Comment PhotoComments @relation(fields: [comment_id], references: [id])
  User    User          @relation(fields: [user_id], references: [id])


  @@unique([user_id, comment_id])
  @@map("comment_reactions")
}

model File {
  id           Int       @id @default(autoincrement())
  name         String
  originalname String
  size         Int
  extension    String
  type         FileTypes
  download     String?
  user_id      Int
  photo_id     Int?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())

  User  User   @relation(fields: [user_id], references: [id])
  Photo Photo? @relation(fields: [photo_id], references: [id])
  @@map("uploaded_files")
}

model Tags {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  photo_id    Int?
  user_id     Int?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  User  User?   @relation(fields: [user_id], references: [id])
  Photo Photo[] @relation(fields: [photo_id], references: [id])
}

model UserLikes {
  id          Int      @id @default(autoincrement())
  user_id     Int
  photo_id    Int
  is_liked    Boolean
  is_disliked Boolean
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())


  User  User  @relation(fields: [user_id], references: [id])
  Photo Photo @relation(fields: [photo_id], references: [id])

  @@unique([user_id, photo_id])
}

model Search {
  id            Int        @id @default(autoincrement())
  type          SearchType
  searchable    String
  searchable_id Int
  created_at    DateTime   @default(now())
  updated_at    DateTime   @default(now())


  @@unique([searchable_id, type])
  @@map("search")
}

model FriendList {
  id           Int      @id @default(autoincrement())
  user_id      Int
  friend_id    Int
  is_requested Boolean
  is_accepted  Boolean
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())

  User User @relation(fields: [user_id], references: [id])

  @@unique([user_id, friend_id])
  @@map("friend_list")
}

enum SearchType {
  USER
  PHOTO
}

enum Role {
  USER
  ADMIN
}

enum FileTypes {
  PHOTO
  AVATAR
  FILE
}

enum TokenTypes {
  RESET_PASSWORD
  ACTIVATE_EMAIL
  AUTHORIZATION
}
