# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input ActivateUserInput {
  activate_token: String!
}

input AddToFriendListInput {
  friend_id: Float!
}

input CommentReactionsCreateInput {
  comment_id: Float!
  is_disliked: Boolean!
  is_liked: Boolean!
  user_id: Float
}

input CommentUpdateInput {
  comment: String!
  id: Float!
}

type CommentsWithPagination {
  items: [PhotoCommentsGraphQL!]!
  meta: MetaPagination!
}

input CreateMessageInput {
  conversation_id: Float
  message: String!
  receiver_id: Float!
}

input CreatePhotoComment {
  comment: String!
  photo_id: Float!
}

input CreatePhotoInput {
  description: String!
  title: String!
  user_id: Float
}

input CreateReplyInput {
  comment_id: Float!
  reply_to: Float!
}

input CreateResetToken {
  email: String!
}

input CreateTagsInput {
  description: String!
  name: String!
  photo_id: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeletePhotoInput {
  slug: String!
}

input DeleteTagInput {
  id: Float!
}

type FileGraphQL {
  created_at: DateTime!
  download: String!
  extension: String!
  id: Float!
  name: String!
  originalname: String!
  photo_id: Float!
  size: Float!
  type: String!
  updated_at: DateTime!
  user_id: Float!
}

type FriendListOutputDto {
  User: UserGraphQL!
  created_at: DateTime!
  friend_id: Float!
  id: Float!
  is_accepted: Boolean
  is_requested: Boolean
  updated_at: DateTime!
  user_id: Float!
}

input GetMessagesInput {
  conversation_id: Float!
  receiver_id: Float!
}

input GetUserFriendsInput {
  user_slug: String!
}

type MessageOutputDto {
  User: UserGraphQL
  conversation_id: Float!
  created_at: DateTime
  deleted_at: DateTime
  id: Float!
  is_edited: Boolean!
  is_seen: Boolean!
  message: String!
  receiver_id: Float!
  updated_at: DateTime
  user_id: Float!
}

type MetaPagination {
  currentPage: Float!
  itemCount: Float!
  totalItems: Float!
  totalPages: Float!
}

type Mutation {
  acceptInvitation(acceptInvitationArgs: AddToFriendListInput!): Boolean!
  activateUserAccount(activateAccount: ActivateUserInput!): UserOutputDto!
  addFriend(addFriend: AddToFriendListInput!): Boolean!
  changeEmail(changeEmailArgs: UserUpdateInput!): UserOutputDto!
  changeUserPassword(changePasswordArgs: UserUpdateInput!): UserOutputDto!
  createComment(commentCreate: CreatePhotoComment!): PhotoCommentsGraphQL!
  createMessage(createMessageArgs: CreateMessageInput!): MessageOutputDto!
  createPhoto(createPhotoArgs: CreatePhotoInput!): PhotoOutputDto!
  createPublicProfile(createProfileArgs: UserPublicProfileInput!): UserPublicProfileOutput!
  createReaction(commentReaction: CommentReactionsCreateInput!): Boolean!
  createReply(replyToArgs: CreateReplyInput!): Boolean!
  createResetToken(userEmail: CreateResetToken!): ResetPasswordTokenDto!
  createTag(createTagData: CreateTagsInput!): TagsOutputDto!
  deleteComment(comment_id: Float!): Boolean!
  deleteMessage(id: Float!): Boolean!
  deletePhoto(deletePhoto: DeletePhotoInput!): Boolean!
  deletePublicProfile: Boolean!
  deleteTag(tag_id: DeleteTagInput!): Boolean!
  removeFriend(removeFriendArgs: AddToFriendListInput!): Boolean!
  resetPassword(resetPassword: ResetUserPassword!): UserOutputDto!
  setUserReaction(userReaction: UserReactionInput!): Boolean!
  signUp(signUpInput: UserSignUpInput!): UserOutputDto!
  singIn(signInInput: UserSignInInput!): UserOutputDto!
  updateComment(updateCommentArgs: CommentUpdateInput!): PhotoCommentsGraphQL!
  updateMessage(updateMessageArgs: UpdateMessageInput!): MessageOutputDto!
  updatePhoto(updatePhotoArgs: UpdatePhotoInput!): PhotoOutputDto!
  updatePublicProfile(profileUpdateArgs: UserPublicProfileInput!): UserPublicProfileOutput!
  updateUser(updateUserArgs: UserUpdateInput!): UserOutputDto!
}

input PaginationOptions {
  page: Float!
  skip: Float!
  take: Float!
}

type PhotoCommentsGraphQL {
  CommentReactions: Boolean!
  CommentReplies: Boolean!
  Photo: PhotoGraphQL!
  User: UserGraphQL!
  comment: String!
  created_at: DateTime!
  deleted_at: DateTime!
  id: Float!
  is_edited: Boolean!
  is_seen: Boolean!
  photo_id: Float!
  updated_at: DateTime!
  user_id: Float!
}

input PhotoCommentsInput {
  page: Float!
  photoId: Float!
  skip: Float!
  take: Float!
}

type PhotoGraphQL {
  created_at: DateTime!
  deleted_at: DateTime!
  description: String!
  id: Float!
  slug: String!
  title: String!
  updated_at: DateTime!
  user_id: Float!
}

type PhotoOutputDto {
  Files: [FileGraphQL!]
  Tags: [TagsGraphQL!]
  User: UserGraphQL!
  UserLikes: [UserLikesGraphQL!]
  deleted_at: DateTime
  description: String!
  slug: String!
  title: String!
  user_id: Float
}

type PhotosWithPaginationDto {
  items: [PhotoOutputDto!]!
  meta: MetaPagination!
}

type Query {
  getCommentsByPhotoId(pagination: PhotoCommentsInput!): CommentsWithPagination!
  getLikedPhotos(paginationOptions: PaginationOptions!): PhotosWithPaginationDto!
  getMessages(getMessagesArgs: GetMessagesInput!): [MessageOutputDto!]!
  getPhotoBySlug(photoSlug: String!): PhotoOutputDto!
  getPhotos(paginationOptions: PaginationOptions!): PhotosWithPaginationDto!
  getPublicProfile(slug: String!): UserPublicProfileOutput!
  getTagsByName(name: String!): [TagsOutputDto!]!
  getTagsByPhotoId(photoId: Float!): [TagsOutputDto!]!
  getTagsByUserId: [TagsOutputDto!]!
  getUnreadedMessages: [MessageOutputDto!]!
  getUserFriends(getUserFriendsArgs: GetUserFriendsInput!): [FriendListOutputDto!]!
  getUserPhotos(paginationOptions: PaginationOptions!): PhotosWithPaginationDto!
  sayHello: String!
  searchByUserName(name: String!): [UserGraphQL!]!
  searchPhotos(searchable: String!): [PhotoGraphQL!]!
}

type ResetPasswordTokenDto {
  token: String!
}

input ResetUserPassword {
  password: String!
  reset_token: String!
}

type TagsGraphQL {
  created_at: DateTime!
  description: String!
  id: Float!
  name: String!
  photo_id: Float!
  updated_at: DateTime!
  user_id: Float!
}

type TagsOutputDto {
  Photo: [PhotoGraphQL!]!
  User: UserGraphQL!
  created_at: DateTime!
  description: String!
  id: Float!
  name: String!
  photo_id: Float!
  updated_at: DateTime!
  user_id: Float!
}

input UpdateMessageInput {
  id: Float!
  is_edited: Boolean!
  is_seen: Boolean!
  message: String!
}

input UpdatePhotoInput {
  description: String
  slug: String!
  title: String
}

type UserGraphQL {
  avatar_id: Float!
  created_at: DateTime!
  deleted_at: DateTime!
  email: String!
  first_name: String!
  has_public_profile: Boolean
  id: Float!
  is_active: Boolean!
  is_disabled: Boolean!
  last_name: String!
  password: String!
  role: String!
  send_emails: Boolean!
  slug: String!
  updated_at: DateTime!
}

type UserLikesGraphQL {
  created_at: DateTime!
  id: Float!
  is_disliked: Boolean!
  is_liked: Boolean!
  photo_id: Float!
  updated_at: DateTime!
  user_id: Float!
}

type UserOutputDto {
  authorization_token: String
  email: String
  first_name: String
  is_active: Boolean
  is_deleted: Boolean
  is_disabled: Boolean
  last_name: String
  role: String
  slug: String
}

input UserPublicProfileInput {
  about_me: String
  facebook_link: String
  instagram_lik: String
  public_email: String
  twitter_link: String
  video_link: String
  years: String
  youtube_link: String
}

type UserPublicProfileOutput {
  User: UserGraphQL
  about_me: String
  created_at: DateTime!
  deleted_at: DateTime
  facebook_link: String
  id: Float!
  instagram_lik: String
  public_email: String
  twitter_link: String
  updated_at: DateTime!
  user_id: Float!
  video_link: String
  years: String
  youtube_link: String
}

input UserReactionInput {
  is_disliked: Boolean!
  is_liked: Boolean!
  photo_id: Float!
  user_id: Float!
}

input UserSignInInput {
  email: String!
  password: String!
  remember_me: Boolean = false
}

input UserSignUpInput {
  email: String!
  first_name: String!
  last_name: String
  password: String!
  send_emails: Boolean!
}

input UserUpdateInput {
  avatar_id: Float
  email: String
  first_name: String
  has_public_profile: Boolean
  is_active: Boolean
  is_disabled: Boolean
  last_name: String
  password: String
  send_emails: Boolean
}
